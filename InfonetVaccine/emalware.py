# -*- coding:utf-8 -*-
import os

# -------------------------------------------------------------------------
# KavMain 클래스
# -------------------------------------------------------------------------
class KavMain:
    # ---------------------------------------------------------------------
    # init(self, plugins_path)
    # 플러그인 엔진을 초기화 한다.
    # 인력값 : plugins_path - 플러그인 엔진의 위치
    # 리턴값 : 0 - 성공, 0 이외의 값 - 실패
    # ---------------------------------------------------------------------
    def init(self, plugins_path) : # 플러그인 엔진 초기화
        return 0

    # ---------------------------------------------------------------------
    # uninit(self)
    # 플러그인 엔진을 종료한다.
    # 리턴값 : 0 - 성공, 0 이외의 값 - 실패
    # ---------------------------------------------------------------------
    def uninit(self):  # 플러그인 엔진 종료
        return 0  # 플러그인 엔진 종료 성공

    # ---------------------------------------------------------------------
    # getinfo(self)
    # 플러그인 엔진의 주요 정보를 알려준다. (제작자, 버전, ...)
    # 리턴값 : 플러그인 엔진 정보
    # ---------------------------------------------------------------------
    def getinfo(self):  # 플러그인 엔진의 주요 정보
        from InfonetVaccine import kavutil
        pmd5 = kavutil.PatternMD5('.')
        info = dict()  # 사전형 변수 선언

        info['author'] = 'Hyeon Jun'  # 제작자
        info['version'] = '1.0'  # 버전
        info['title'] = 'eMalware Engine'  # 엔진 설명
        info['kmd_name'] = 'emalware'  # 엔진 파일 이름
        info['sig_num'] = len(self.listvirus())

        return info

    # ---------------------------------------------------------------------
    # listvirus(self)
    # 진단/치료 가능한 악성코드의 리스트를 알려준다.
    # 리턴값 : 악성코드 리스트
    # ---------------------------------------------------------------------
    def listvirus(self):  # 진단 가능한 악성코드 리스트
        from InfonetVaccine import kavutil
        pmd5 = kavutil.PatternMD5('.')
        vlist = pmd5.get_sig_vlist('emalware')
        vlist.append('Backdoor.Linux.Mirai.a.gen')
        vlist = list(set(vlist))
        vlist.sort()

        vlists = []
        for vname in vlist:
            vlists.append(kavutil.normal_vname(vname))

        vlists.append(kavutil.normal_vname('<n>AdWare.Win32.Sokuxuan.gen'))

        return vlists

    # ---------------------------------------------------------------------
    # scan(self, filehandle, filename, fileformat)
    # 악성코드를 검사한다.
    # 입력값 : filehandle  - 파일 핸들
    #         filename    - 파일 이름
    #         fileformat  - 파일 포맷
    #         filename_ex - 압축 파일 내부 파일 이름
    # 리턴값 : (악성코드 발견 여부, 악성코드 이름, 악성코드 ID) 등등
    # ---------------------------------------------------------------------
    def scan(self, filehandle, filename, fileformat, filename_ex): # 악성코드 검사
        from InfonetVaccine import kernel, kavutil, crytolib
        pmd5 = kavutil.PatternMD5('.')
        try:
            mm = filehandle

            # 미리 분석된 파일 포맷 중에 PE 포맷이 있는가?
            if 'ff_pe' in fileformat:
                ff = fileformat['ff_pe']

                # 섹션을 조사한다.
                for section in ff['pe']['Sections']:
                    # 실행 속성을 가졌는가?
                    if (section['Characteristics'] & 0x20000000) == 0x20000000:
                        # 해당 섹션이 파일에서 차지하는 크기
                        fsize = section['SizeRawData']
                        # 섹션 크기가 emalware 악성코드 패턴에 존재하는가?
                        if pmd5.match_size('emalware', fsize):
                            # 섹션의 MD5 해시 계산
                            foff = section['PointerRawData']
                            fmd5 = crytolib.md5(mm[foff:foff+fsize])
                            # emalware 악성코드 패턴에서 MD5 검사
                            vname = pmd5.scan('emalware', fsize, fmd5)
                            if vname: # 악성코드가 발견되었는가?
                                return True, vname, 0, kernel.INFECTED
        except IOError:
            pass

        # 악성코드를 발견하지 못했음을 리턴한다.
        return False, '', -1, kernel.NOT_FOUND

    # ---------------------------------------------------------------------
    # disinfect(self, filename, malware_id)
    # 악성코드를 치료한다.
    # 입력값 : filename    - 파일 이름
    #        : malware_id - 치료할 악성코드 ID
    # 리턴값 : 악성코드 치료 여부
    # ---------------------------------------------------------------------
    def disinfect(self, filename, malware_id): # 악성코드 치료
        try:
            # 악성코드 진단 결과에서 받은 ID 값이 0인가?
            if malware_id == 0:
                os.remove(filename) # 파일 삭제
                return True
        except IOError:
            pass

        return False # 치료 실패 리턴

